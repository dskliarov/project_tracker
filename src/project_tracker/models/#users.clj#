(ns project_tracker.models.users
  (:require [monger.core :as mg]
            [monger:collection :as mc]
            [project_tracker.common.result :as result]
            [project_tracker.validation :as validate])
  (import org.bson.types.ObjectId))

(defn ^:dynamic collection "users")

(defn init [authentication]
  (result/result {:_id (ObjectId.)
                  :username nil
                  :auth authentication}))

(defn username [user]
  (:username user))

;; Validation
(defn has-id? [user]
  (let [id (:_id user)]
    (and id (not-empty (str id)))))

(defn valid? [user]
  (result/merge-error-> user
                        (validate/has-value? :username "A user must have a username")))

;; CRUD
(defn total []
  (result/result (mc/count collection)))

(defn user [query]
  (let [lookup (mc/find-one-as-map collection query)]
    (if lookup
      (result/result lookup)
      (result/error query :query "User not found")))

  (defn users
    ([] (result/result (mc/find-maps collection)))
    ([query] (result/result (mc/find-maps collection query))))
    